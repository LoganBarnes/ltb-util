name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ####################################
  # Pure build without tests enabled #
  ####################################
  build:
    strategy:
      matrix:
        build_type: [ Release, Debug ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DLTB_ENABLE_TESTING=OFF

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel

  ###############################################
  # Build with tests enabled then run the tests #
  ###############################################
  build-and-test:
    strategy:
      matrix:
        build_type: [ Release, Debug ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DLTB_ENABLE_TESTING=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  ############################################
  # Check memory and upload coverage reports #
  ############################################
  coverage-and-memory:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get install -y ninja-build lcov valgrind

      - name: Check Memory and Coverage
        run: ctest -S cmake/CTest.cmake --output-on-failure --verbose

      - name: Upload
        uses: codecov/codecov-action@v2
